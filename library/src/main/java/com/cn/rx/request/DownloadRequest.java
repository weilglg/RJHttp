package com.cn.rx.request;import com.cn.rx.callback.DownloadProgressCallBack;import com.cn.rx.func.RetryExceptionFunc;import com.cn.rx.subscriber.RxDownloadSubscriber;import com.cn.rx.transformer.HandleErrorTransformer;import io.reactivex.Observable;import io.reactivex.ObservableSource;import io.reactivex.ObservableTransformer;import io.reactivex.disposables.Disposable;import io.reactivex.schedulers.Schedulers;import okhttp3.ResponseBody;@SuppressWarnings(value = {"unchecked", "deprecation"})public class DownloadRequest extends BaseRequest<DownloadRequest> {    private String saveName;    private String savePath;    public DownloadRequest(String url) {        super(url);    }    /**     * 下载文件名称<br>     * 默认名字是时间戳生成的<br>     */    public DownloadRequest saveName(String saveName) {        this.saveName = saveName;        return this;    }    /**     * 下载文件保存的路径<br/>     * 默认在：/storage/emulated/0/Android/data/包名/files/1494647767055<br>     */    public DownloadRequest savePath(String savePath) {        this.savePath = savePath;        return this;    }    @Override    protected Observable<ResponseBody> generateRequest() {        return mApiManager.downloadFile(mUrl);    }    public Disposable execute(Object tag, DownloadProgressCallBack callBack) {        return build().generateRequest().compose(new ObservableTransformer<ResponseBody, ResponseBody>() {            @Override            public ObservableSource<ResponseBody> apply(Observable<ResponseBody> upstream) {                if (isSyncRequest) {                    return upstream.subscribeOn(Schedulers.io())                            .unsubscribeOn(Schedulers.io())                            .observeOn(Schedulers.computation());                } else {                    return upstream;                }            }        }).compose(new HandleErrorTransformer<>())                .retryWhen(new RetryExceptionFunc(mRetryCount, mRetryDelay, mRetryIncreaseDelay))                .subscribeWith(new RxDownloadSubscriber(tag, mUrl, mContext, savePath, saveName, callBack));    }}